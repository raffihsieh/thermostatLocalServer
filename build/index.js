'use strict';

var _asyncChildProcess = require('async-child-process');

const express = require('express');

const app = express();

app.get('/', async (req, res) => {
	let temperature = await getTemp();
	let humidity = await getHumidity();
	res.status(200).send({ temperature, humidity }); //get current temp from python code
});

app.get('/temp', async (req, res) => {
	let temperature = await getTemp(res);
	res.status(200).send({ temperature }); //get current temp from python code
});

app.get('/hum', async (req, res) => {
	let humidity = await getHumidity();
	res.status(200).send({ humidity }); //get current temp from python code
});

app.get('/setTarget', (req, res) => {
	let target = req.query.targetTemp;
	//TODO: set target temp
	console.log(`set the target temp to ${target}`);
	res.status(200).send({ targetTemp: target });
});

app.post('/off', function (req, res) {});

app.post('/heat', function (req, res) {});

async function getTemp() {
	let { stdout } = await (0, _asyncChildProcess.execAsync)('./build/temp.py');
	let tempFRaw = stdout * 9 / 5 + 32;
	let tempF = Math.round(tempFRaw * 1e1) / 1e1;
	console.log(`tempc = ${stdout}`);
	console.log(`tempF = ${tempF}`);

	return tempF;
}
async function getHumidity() {
	let { stdout } = await (0, _asyncChildProcess.execAsync)('./build/humidity.py');
	let humidity = parseFloat(stdout);
	console.log(`humidity = ${humidity}`);

	return humidity;
}

function setTarget(target) {
	//write to target file
}

function toggleOnOff() {
	//toggle on/off 
}

app.listen(3000, () => console.log("Running on 3000"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImFwcCIsImdldCIsInJlcSIsInJlcyIsInRlbXBlcmF0dXJlIiwiZ2V0VGVtcCIsImh1bWlkaXR5IiwiZ2V0SHVtaWRpdHkiLCJzdGF0dXMiLCJzZW5kIiwidGFyZ2V0IiwicXVlcnkiLCJ0YXJnZXRUZW1wIiwiY29uc29sZSIsImxvZyIsInBvc3QiLCJzdGRvdXQiLCJ0ZW1wRlJhdyIsInRlbXBGIiwiTWF0aCIsInJvdW5kIiwicGFyc2VGbG9hdCIsInNldFRhcmdldCIsInRvZ2dsZU9uT2ZmIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7O0FBRUEsTUFBTUMsTUFBTUYsU0FBWjs7QUFFQUUsSUFBSUMsR0FBSixDQUFRLEdBQVIsRUFBYSxPQUFPQyxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFDaEMsS0FBSUMsY0FBYyxNQUFNQyxTQUF4QjtBQUNBLEtBQUlDLFdBQVcsTUFBTUMsYUFBckI7QUFDQUosS0FBSUssTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNMLFdBQUQsRUFBY0UsUUFBZCxFQUFyQixFQUhnQyxDQUdlO0FBQy9DLENBSkQ7O0FBTUFOLElBQUlDLEdBQUosQ0FBUSxPQUFSLEVBQWlCLE9BQU9DLEdBQVAsRUFBWUMsR0FBWixLQUFvQjtBQUNwQyxLQUFJQyxjQUFjLE1BQU1DLFFBQVFGLEdBQVIsQ0FBeEI7QUFDQUEsS0FBSUssTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNMLFdBQUQsRUFBckIsRUFGb0MsQ0FFQztBQUNyQyxDQUhEOztBQUtBSixJQUFJQyxHQUFKLENBQVEsTUFBUixFQUFnQixPQUFPQyxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFDbkMsS0FBSUcsV0FBVyxNQUFNQyxhQUFyQjtBQUNBSixLQUFJSyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0gsUUFBRCxFQUFyQixFQUZtQyxDQUVEO0FBQ2xDLENBSEQ7O0FBS0FOLElBQUlDLEdBQUosQ0FBUSxZQUFSLEVBQXNCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ25DLEtBQUlPLFNBQVNSLElBQUlTLEtBQUosQ0FBVUMsVUFBdkI7QUFDQTtBQUNBQyxTQUFRQyxHQUFSLENBQWEsMEJBQXlCSixNQUFPLEVBQTdDO0FBQ0FQLEtBQUlLLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDRyxZQUFZRixNQUFiLEVBQXJCO0FBQ0EsQ0FMRDs7QUFPQVYsSUFBSWUsSUFBSixDQUFTLE1BQVQsRUFBaUIsVUFBVWIsR0FBVixFQUFlQyxHQUFmLEVBQW9CLENBRXBDLENBRkQ7O0FBSUFILElBQUllLElBQUosQ0FBUyxPQUFULEVBQWtCLFVBQVViLEdBQVYsRUFBZUMsR0FBZixFQUFvQixDQUVyQyxDQUZEOztBQUlBLGVBQWVFLE9BQWYsR0FBeUI7QUFDeEIsS0FBSSxFQUFDVyxNQUFELEtBQVcsTUFBTSxrQ0FBVSxpQkFBVixDQUFyQjtBQUNBLEtBQUlDLFdBQVdELFNBQU8sQ0FBUCxHQUFXLENBQVgsR0FBZSxFQUE5QjtBQUNBLEtBQUlFLFFBQVFDLEtBQUtDLEtBQUwsQ0FBV0gsV0FBVyxHQUF0QixJQUE2QixHQUF6QztBQUNBSixTQUFRQyxHQUFSLENBQWEsV0FBVUUsTUFBTyxFQUE5QjtBQUNBSCxTQUFRQyxHQUFSLENBQWEsV0FBVUksS0FBTSxFQUE3Qjs7QUFFQSxRQUFPQSxLQUFQO0FBQ0E7QUFDRCxlQUFlWCxXQUFmLEdBQTZCO0FBQzVCLEtBQUksRUFBQ1MsTUFBRCxLQUFXLE1BQU0sa0NBQVUscUJBQVYsQ0FBckI7QUFDQSxLQUFJVixXQUFXZSxXQUFXTCxNQUFYLENBQWY7QUFDQUgsU0FBUUMsR0FBUixDQUFhLGNBQWFSLFFBQVMsRUFBbkM7O0FBRUEsUUFBT0EsUUFBUDtBQUNBOztBQUVELFNBQVNnQixTQUFULENBQW1CWixNQUFuQixFQUEyQjtBQUMxQjtBQUNBOztBQUVELFNBQVNhLFdBQVQsR0FBdUI7QUFDdEI7QUFDQTs7QUFFRHZCLElBQUl3QixNQUFKLENBQVcsSUFBWCxFQUFpQixNQUFNWCxRQUFRQyxHQUFSLENBQVksaUJBQVosQ0FBdkIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7ZXhlY0FzeW5jfSBmcm9tICdhc3luYy1jaGlsZC1wcm9jZXNzJztcblxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5hcHAuZ2V0KCcvJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG5cdGxldCB0ZW1wZXJhdHVyZSA9IGF3YWl0IGdldFRlbXAoKTtcblx0bGV0IGh1bWlkaXR5ID0gYXdhaXQgZ2V0SHVtaWRpdHkoKTtcblx0cmVzLnN0YXR1cygyMDApLnNlbmQoe3RlbXBlcmF0dXJlLCBodW1pZGl0eX0pOyAvL2dldCBjdXJyZW50IHRlbXAgZnJvbSBweXRob24gY29kZVxufSk7XG5cbmFwcC5nZXQoJy90ZW1wJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG5cdGxldCB0ZW1wZXJhdHVyZSA9IGF3YWl0IGdldFRlbXAocmVzKTtcblx0cmVzLnN0YXR1cygyMDApLnNlbmQoe3RlbXBlcmF0dXJlfSk7IC8vZ2V0IGN1cnJlbnQgdGVtcCBmcm9tIHB5dGhvbiBjb2RlXG59KTtcblxuYXBwLmdldCgnL2h1bScsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuXHRsZXQgaHVtaWRpdHkgPSBhd2FpdCBnZXRIdW1pZGl0eSgpO1xuXHRyZXMuc3RhdHVzKDIwMCkuc2VuZCh7aHVtaWRpdHl9KTsgLy9nZXQgY3VycmVudCB0ZW1wIGZyb20gcHl0aG9uIGNvZGVcbn0pO1xuXG5hcHAuZ2V0KCcvc2V0VGFyZ2V0JywgKHJlcSwgcmVzKSA9PiB7XG5cdGxldCB0YXJnZXQgPSByZXEucXVlcnkudGFyZ2V0VGVtcDtcblx0Ly9UT0RPOiBzZXQgdGFyZ2V0IHRlbXBcblx0Y29uc29sZS5sb2coYHNldCB0aGUgdGFyZ2V0IHRlbXAgdG8gJHt0YXJnZXR9YCk7XG5cdHJlcy5zdGF0dXMoMjAwKS5zZW5kKHt0YXJnZXRUZW1wOiB0YXJnZXR9KTtcbn0pO1xuXG5hcHAucG9zdCgnL29mZicsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuXG59KTtcblxuYXBwLnBvc3QoJy9oZWF0JywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG5cbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRUZW1wKCkge1xuXHRsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjQXN5bmMoJy4vYnVpbGQvdGVtcC5weScpO1xuXHRsZXQgdGVtcEZSYXcgPSBzdGRvdXQqOSAvIDUgKyAzMjtcblx0bGV0IHRlbXBGID0gTWF0aC5yb3VuZCh0ZW1wRlJhdyAqIDFlMSkgLyAxZTE7XG5cdGNvbnNvbGUubG9nKGB0ZW1wYyA9ICR7c3Rkb3V0fWApO1xuXHRjb25zb2xlLmxvZyhgdGVtcEYgPSAke3RlbXBGfWApO1xuXG5cdHJldHVybiB0ZW1wRjtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEh1bWlkaXR5KCkge1xuXHRsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjQXN5bmMoJy4vYnVpbGQvaHVtaWRpdHkucHknKTtcblx0bGV0IGh1bWlkaXR5ID0gcGFyc2VGbG9hdChzdGRvdXQpXG5cdGNvbnNvbGUubG9nKGBodW1pZGl0eSA9ICR7aHVtaWRpdHl9YCk7XG5cblx0cmV0dXJuIGh1bWlkaXR5O1xufVxuXG5mdW5jdGlvbiBzZXRUYXJnZXQodGFyZ2V0KSB7XG5cdC8vd3JpdGUgdG8gdGFyZ2V0IGZpbGVcbn1cblxuZnVuY3Rpb24gdG9nZ2xlT25PZmYoKSB7XG5cdC8vdG9nZ2xlIG9uL29mZiBcbn1cblxuYXBwLmxpc3RlbigzMDAwLCAoKSA9PiBjb25zb2xlLmxvZyhcIlJ1bm5pbmcgb24gMzAwMFwiKSk7XG4iXX0=